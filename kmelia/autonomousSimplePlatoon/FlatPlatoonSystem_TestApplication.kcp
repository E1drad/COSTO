COMPONENT PlatoonSystem_TestApplication
#Costo generated test environement for PlatoonSystem

INTERFACE
  #provides: {}
  #requires: {}
  #config: {}
  #autorun: {}

COMPOSITION
    #
   Assembly
   Components
      driver : SimpleDriver;
      mid : SimpleVehicle;
      last : SimpleVehicle
   Configuration
      driver.conf(10);
      mid.conf("mid",50,0);
      last.conf("last",100,0);
   Links 
   ////////////assembly links//////////
      @mlpos:   p-r    mid.pos last.pilotpos
      @dmdist:   p-r    mid.giveSafeDistance last.safeDistance
      @dmgoal:   p-r    driver.goalreached mid.isgoalreached
      @dmspeed:   p-r    driver.speed mid.pilotspeed
      @dmpos:   p-r    driver.pos mid.pilotpos
      @mlspeed:   p-r    mid.speed last.pilotspeed
      @mlgoal:   p-r    mid.goalreached last.isgoalreached   
End // assembly
END_COMPOSITION

 #END of PlatoonSystem_TestApplication
COMPONENT SimpleDriver

INTERFACE  
  provides : {pos, speed, goalreached, giveSafeDistance}
  config : {conf}
USES {PLATOONLIB}
VARIABLES  
  goal : Integer;
  
  
INITIALIZATION
  goal := 0;  
  
SERVICES 

provided conf(thegoal:Integer)
Behavior
Init i Final f
{ i-- goal:=thegoal-->f
}
End

########### provided services 

provided goalreached(followerpos:Integer):Boolean
//return true if my goal is reached and the caller is within minimal distance of myself  
Variables 
ok:Boolean;
 Behavior 
 Init i
 Final f 
 {
 i--  ok:=(goal-followerpos<=idealDistance)-->e2,
 e2--SendResult(ok)-->f
}
End



provided pos():Integer
Behavior 
Init i Final f  
{ i-- SendResult(goal) -->f }
End


provided giveSafeDistance():Integer
Behavior 
Init i Final f  
{ i-- SendResult(10) -->f }
End

provided speed():Integer
Behavior 
Init i Final f  
{ i--SendResult(40) -->f }
End
END_SERVICES
 COMPONENT SimpleVehicle
INTERFACE  
  provides : {run, pos, speed, goalreached, computeSpeed, giveSafeDistance}
  requires : {pilotpos,pilotspeed, isgoalreached, safeDistance} 
  config : {conf}
//  autorun: {run}
USES {PLATOONLIB} 
VARIABLES    
  obs goalreached:Boolean;
  vspeed, 
  lastpos : Integer; 
  vname : String;
INVARIANT
  @borned: 0 <= vspeed and vspeed <= maxSpeed
  
INITIALIZATION 
  goalreached:=false;
  vspeed := 0;
  lastpos := 0; 
  vname := "Anonymous";
 
SERVICES
########### provided services  
provided conf(pvname : String; currentPos : Integer; currentSpeed:Integer)
Behavior 
Init initvi Final initvf  
{  initvi -- lastpos := currentPos --> initve1,
   initve1 -- vname := pvname --> initve2,  
   initve2 -- vspeed := currentSpeed  --> initve3, 
   initve3 -- display(vname + " is initialised at currentpos: "+currentPos+ " speed: "+currentSpeed) --> initvf
}
Post lastpos = currentPos &&vspeed=currentSpeed
End

required safeDistance():Integer
End

required isgoalreached(followerpos:Integer):Boolean
End

provided goalreached(followerpos:Integer):Boolean
//return true if my goal is reached and the caller is within minimal distance of myself  
Variables 
ok:Boolean;
 Behavior 
 Init i
 Final f 
 {
 i--  ok:=goalreached and (lastpos-followerpos<=idealDistance)-->e2,
 e2--SendResult(ok)-->f
}
End

provided run ()
Interface
  extrequires: {safeDistance, isgoalreached} 
  intrequires : {applySpeed, computeSpeed}
Variables
  safeDist:Integer;
  newspeed:Integer;
  

Behavior 
Init vri1 Final vrfinal  
{   
  vri1 -- display("Vehicle "+vname+" starts") --> return,
  return --SendResult() --> checkSD0,
  checkSD0 -- safeDist:=!!safeDistance() -->checkgoal1, 
  checkgoal0 --goalreached:=!!isgoalreached(lastpos)-->checkgoal1,
  checkgoal1 -- [goalreached] display("Vehicle "+vname+" arrived") -->vrfinal,
  checkgoal1 -- [not goalreached] display("Vehicle "+vname+"getting info") -->computespeed,
  computespeed -- newspeed:= !!computeSpeed(safeDist) --> applyspeed1,
  applyspeed1 -- !!applySpeed(newspeed)--> applyspeed2,
  applyspeed2 -- ??applySpeed()--> displaypos,
  displaypos -- display("Vehicle "+vname+" new speed applied pos: "+lastpos+" speed:"+vspeed) --> checkgoal0
}

End


provided applySpeed(thespeed:Integer)
Pre  thespeed >= 0 && thespeed <= maxSpeed
Behavior 
Init i Final f  
{
i-- lastpos:=lastpos+thespeed-->e1,
e1-- vspeed:= thespeed -->e2,
e2--  SendResult() -->f
} 
#Post vspeed=thespeed && lastpos = old(lastpos)+thespeed
End
 
provided computeSpeed(safeDistance:Integer) :Integer
Interface
  extrequires: {pilotpos, pilotspeed} 
Pre safeDistance >=0
Variables 
distance:Integer; 
newspeed:Integer;
ppos, pspeed:Integer;
Behavior  
Init i Final f   
{
 i-- display("computeSpeed called with safeDistance: "+safeDistance)-->displaystate, 
 displaystate-- display("Vehicle "+vname+" has lastpos: "+lastpos+" and  vspeed: "+vspeed) -->getppos1, 
 getppos1-- ppos:=!!pilotpos() --> getppos2,
  getppos2 -- display("Vehicle "+vname+" gets pilotpos"+ppos) --> getpspeed1,
  getpspeed1 -- pspeed:=!!pilotspeed() --> displayspeed,
  displayspeed--  display("Vehicle "+vname+" gets pilotspeed"+pspeed) -->calcdist,
calcdist-- distance := ppos-lastpos  --> e1,
e1 -- [distance>safeDistance && vspeed<=pspeed] newspeed:=vspeed+distanceStep --> e2,
e1--  [distance>safeDistance && vspeed>pspeed]  newspeed:= vspeed - distanceStep -->e2,  // *((distance-safeDistance) div distance)     
e1 --[distance <=safeDistance] newspeed:=0 -->e2, 
e2 --[newspeed<0] SendResult(0) --> f,
e2 --[newspeed>maxSpeed] SendResult(maxSpeed) --> f,
e2 -- [newspeed<=maxSpeed && newspeed>=0] SendResult(newspeed) -->f
}
Post
Result>=0 && Result<=maxSpeed && 
((ppos-lastpos)<safeDistance) implies Result = 0
End


provided pos():Integer
Behavior 
Init i Final f  
{ i-- __CALLER!!pos(lastpos) -->f }
End

provided speed():Integer
Behavior 
Init i Final f  
{ i-- __CALLER!!speed(vspeed) -->f }
End


provided giveSafeDistance():Integer
Behavior 
Init i Final f  
{ i-- SendResult(10) -->f }
End
//////////// required services //////////
required pilotspeed():Integer 
End
required pilotpos():Integer 
End
END_SERVICES
 